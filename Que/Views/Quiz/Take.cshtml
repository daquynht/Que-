@model Que.ViewModels.QuizTakeViewModel

@{
    ViewData["Title"] = $"Take Quiz: @Model.QuizName";
}

<h1 class="text-center">@Model.QuizName</h1>
<p class="text-muted text-center">Question @Model.QuestionNumber of @Model.TotalQuestions</p>
<h2 class="text-center text-danger" id="quiz-timer"></h2>

<form asp-action="Take" method="post" class="mt-5">
    @Html.AntiForgeryToken()

    <input type="hidden" name="QuizId" value="@Model.QuizId" />
    <input type="hidden" name="QuestionId" value="@Model.QuestionId" />
    <input type="hidden" name="QuestionNumber" value="@Model.QuestionNumber" />

    <div class="card p-4 shadow-sm custom-card">
        <h3 class="card-title mb-4">@Model.QuestionText</h3> 
        
        <div class="list-group">
            @foreach (var option in Model.Options)
            {
                if (Model.AllowMultipleAnswers)
                {
                    <!-- Multiple answers possible -->
                    <label class="list-group-item d-flex align-items-center mb-2 custom-option">
                        <input type="checkbox"
                            name="SelectedOptionIds"
                            value="@option.OptionId"
                            class="form-check-input me-3" />
                        <span class="option-text">@option.Text</span>
                    </label>
                }
                else
                {
                    <!-- Only one answer -->
                    <label class="list-group-item d-flex align-items-center mb-2 custom-option">
                        <input type="radio"
                            name="SelectedOptionIds"
                            value="@option.OptionId"
                            required
                            class="form-check-input me-3" />
                        <span class="option-text">@option.Text</span>
                    </label>
                }
            }
        </div>
        
        <div class="text-center mt-4">
            <button type="submit" class="btn btn-primary btn-lg">Next Question / Finish</button>
        </div>
    </div>
</form>

@section Scripts {
<script>
    // Put start time based on TimeLimit in seconds
    let timeLeft = @Model.TimeLimitInSeconds;
    const timerDisplay = document.getElementById("quiz-timer");

    function updateTimer() {
        let minutes = Math.floor(timeLeft / 60);
        let seconds = timeLeft % 60;
        timerDisplay.textContent = `Time Left: ${minutes}:${seconds.toString().padStart(2, '0')}`;
        if (timeLeft <= 0) {
            clearInterval(timerInterval);
            alert("Time is up! Your quiz will be submitted automatically.");
            document.querySelector("form").submit(); // Submit form automatically
        }
        timeLeft--;
    }

    updateTimer(); // Run immediately
    const timerInterval = setInterval(updateTimer, 1000); // Update every second
</script>
}