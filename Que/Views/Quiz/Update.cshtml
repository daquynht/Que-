@model Que.ViewModels.QuizesViewModel

@{
    ViewData["Title"] = "Update Quiz";
    var difficulties = new List<string> { "Easy", "Medium", "Hard" };
    var categories = new List<string> { "Trivia", "History", "Geography", "Math", "Science", "Sports" };
}

<h2>Update Quiz</h2>

<form asp-action="Update" method="post">
    <input type="hidden" asp-for="Quiz.QuizId" />

    <div class="form-group">
        <label asp-for="Quiz.Name"></label>
        <input asp-for="Quiz.Name" class="form-control" />
        <span asp-validation-for="Quiz.Name" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Quiz.Description"></label>
        <textarea asp-for="Quiz.Description" class="form-control"></textarea>
        <span asp-validation-for="Quiz.Description" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Quiz.Category"></label>
        <select asp-for="Quiz.Category" class="form-control">
            @foreach (var cat in categories)
            {
                <option value="@cat" selected="@(Model.Quiz.Category == cat ? "selected" : null)">
                    @cat
                </option>
            }
        </select>
        <span asp-validation-for="Quiz.Category" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Quiz.Difficulty"></label>
        <select asp-for="Quiz.Difficulty" class="form-control">
            @foreach (var diff in difficulties)
            {
                <option value="@diff" selected="@(Model.Quiz.Difficulty == diff ? "selected" : null)">
                    @diff
                </option>
            }
        </select>
        <span asp-validation-for="Quiz.Difficulty" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Quiz.TimeLimit"></label>
        <input asp-for="Quiz.TimeLimit" type="number" class="form-control" min="0" />
        <span asp-validation-for="Quiz.TimeLimit" class="text-danger"></span>
    </div>

    <h4 class="d-inline-block">Questions</h4>
    <button type="button" id="add-question-btn" class="btn btn-secondary btn-sm mb-3">Add Question</button>

    <div id="questions-container"> @* ENDRET: ID er nå "questions-container" *@
    @for (int i = 0; i < Model.Questions.Count; i++)
    {
        <div class="question-block border p-2 m-3" data-index="@i">
        <button type="button" class="btn btn-danger btn-sm remove-question-btn float-end">Remove</button>
            <input type="hidden" asp-for="Questions[@i].QuestionId" />

            <div class="form-group">
                <label asp-for="Questions[@i].Text">Question Text</label>
                <input asp-for="Questions[@i].Text" class="form-control" />
                <span asp-validation-for="Questions[@i].Text" class="text-danger"></span>
            </div>

            <div class="form-check mb-2">
                <input asp-for="Questions[@i].AllowMultipleAnswers" class="form-check-input" />
                <label asp-for="Questions[@i].AllowMultipleAnswers" class="form-check-label">Allow multiple answers</label>
            </div>

            <h5>Options</h5>
            @for (int j = 0; j < Model.Questions[i].Options.Count; j++)
            {
                <div class="form-group option-block"> @* Lagt til "option-block" for konsistens *@
                    <input type="hidden" asp-for="Questions[@i].Options[@j].OptionId" />

                    <label>Option Text</label>
                    <input asp-for="Questions[@i].Options[@j].Text" class="form-control" />

                    <div class="form-check">
                        <input asp-for="Questions[@i].Options[@j].IsCorrect" class="form-check-input" />
                        <label class="form-check-label">Correct</label>
                    </div>
                </div>
            }
        </div>
    }
    </div> @* Lukker questions-container div *@

    <button type="submit" class="btn btn-primary">Save Changes</button>
    <a asp-action="Table" class="btn btn-secondary">Cancel</a>
</form>

@section Scripts {
    <script>
        let questionIndex = @Model.Questions.Count; // Holder styr på den neste ledige indeksen

        // KORRIGERT: Hjelpefunksjon for å generere HTML for et nytt alternativ (med template literals)
        function getOptionHtml(questionIdx, optionIdx) {
            return `
            <div class="form-group option-block">
                <input type="hidden" name="Questions[${questionIdx}].Options[${optionIdx}].OptionId" value="0" />
                    
                    <label>Option Text</label>
                    <input name="Questions[${questionIdx}].Options[${optionIdx}].Text" class="form-control" />
                    
                    <div class="form-check">
                        <input type="checkbox" name="Questions[${questionIdx}].Options[${optionIdx}].IsCorrect" class="form-check-input" value="true" />
                        <label class="form-check-label">Is Correct</label>
                    </div>
                </div>
            `; // Viktig: Bruk bakovervendt apostrof for å returnere strengen
        }

        // Add Question funksjon
        document.getElementById("add-question-btn").addEventListener("click", function () {
            const container = document.getElementById("questions-container");
            const html = `
                <div class="question-block border p-3 mb-3" data-index="${questionIndex}"> 
                    <button type="button" class="btn btn-danger btn-sm remove-question-btn float-end">Remove</button> @* KORRIGERT: Knappeplassering og syntaks *@

                    <input type="hidden" name="Questions[${questionIndex}].QuestionId" value="0" />

                    <div class="form-group">
                        <label>Question Text</label>
                        <input name="Questions[${questionIndex}].Text" class="form-control" />
                    </div>

                    <div class="form-check">
                        <input type="checkbox" name="Questions[${questionIndex}].AllowMultipleAnswers" class="form-check-input" value="true"/>
                        <label class="form-check-label">Allow Multiple Answers</label>
                    </div>

                    <h5>Options</h5>
                    ${getOptionHtml(questionIndex, 0)}
                    ${getOptionHtml(questionIndex, 1)}
                    ${getOptionHtml(questionIndex, 2)}
                    ${getOptionHtml(questionIndex, 3)}
                </div> 
            `;
            container.insertAdjacentHTML("beforeend", html);
            questionIndex++;
        });

        // ------------------------------------------------------------------
        // --- NY FUNKSJONALITET: Fjerne spørsmål og reindeksere ---
        // ------------------------------------------------------------------

        // Legg til en event lytter på containeren for å fange klikk på "Remove"-knapper
        document.getElementById("questions-container").addEventListener("click", function (e) {
            // Sjekk om klikket kom fra en knapp med klassen 'remove-question-btn'
            if (e.target.classList.contains("remove-question-btn")) {
                // Finn nærmeste overordnede element som er spørsmålsblokken
                const questionBlock = e.target.closest(".question-block");
                if (questionBlock) {
                    questionBlock.remove(); // Fjerner elementet fra DOM
                    reindexQuestions(); // Reindekser de resterende spørsmålene
                }
            }
        });

        /**
         * Sikrer at Questions[i].PropertyName er fortløpende (0, 1, 2, ...)
         * for at ASP.NET Model Binder skal binde til en List<Question>.
         */
        function reindexQuestions() {
            const questions = document.querySelectorAll("#questions-container > .question-block");
            
            questions.forEach((q, index) => {
                // Oppdater data-index for fremtidig bruk
                q.dataset.index = index;

                // Oppdater alle name-attributter i spørsmålsblokken
                q.querySelectorAll('[name^="Questions["]').forEach(input => {
                     const nameAttr = input.getAttribute('name');
                     
                     // Bytt ut den gamle indeksen i name-attributtet med den nye
                     input.name = nameAttr.replace(/Questions\[\d+\]/g, `Questions[${index}]`);
                });
            });
            // Oppdater questionIndex til å være lengden av den nye listen
            questionIndex = questions.length;
        }
    </script>
}