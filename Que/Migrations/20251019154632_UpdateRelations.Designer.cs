// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Que.DAL;

#nullable disable

namespace Que.Migrations
{
    [DbContext(typeof(QuizDbContext))]
    [Migration("20251019154632_UpdateRelations")]
    partial class UpdateRelations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("Que.Models.Option", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("OptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options");

                    b.HasData(
                        new
                        {
                            OptionId = 1,
                            IsCorrect = false,
                            QuestionId = 1,
                            Text = "Bergen"
                        },
                        new
                        {
                            OptionId = 2,
                            IsCorrect = true,
                            QuestionId = 1,
                            Text = "Oslo"
                        },
                        new
                        {
                            OptionId = 3,
                            IsCorrect = false,
                            QuestionId = 1,
                            Text = "Trondheim"
                        },
                        new
                        {
                            OptionId = 4,
                            IsCorrect = false,
                            QuestionId = 1,
                            Text = "Stavanger"
                        },
                        new
                        {
                            OptionId = 5,
                            IsCorrect = false,
                            QuestionId = 2,
                            Text = "Saturn"
                        },
                        new
                        {
                            OptionId = 6,
                            IsCorrect = true,
                            QuestionId = 2,
                            Text = "Jupiter"
                        },
                        new
                        {
                            OptionId = 7,
                            IsCorrect = false,
                            QuestionId = 2,
                            Text = "Mars"
                        },
                        new
                        {
                            OptionId = 8,
                            IsCorrect = false,
                            QuestionId = 2,
                            Text = "Jorden"
                        });
                });

            modelBuilder.Entity("Que.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowMultipleAnswers")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuizId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("QuestionId");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            AllowMultipleAnswers = false,
                            QuizId = 1,
                            Text = "What is the capital of Norway?"
                        },
                        new
                        {
                            QuestionId = 2,
                            AllowMultipleAnswers = false,
                            QuizId = 1,
                            Text = "What is the largest planet in our solar system?"
                        });
                });

            modelBuilder.Entity("Que.Models.Quiz", b =>
                {
                    b.Property<int>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TimeLimit")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("Quizes");

                    b.HasData(
                        new
                        {
                            QuizId = 1,
                            Category = "General",
                            Description = "Test your basic knowledge.",
                            Difficulty = "Medium",
                            Name = "General Knowledge Basics",
                            TimeLimit = 10
                        });
                });

            modelBuilder.Entity("Que.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Que.Models.Option", b =>
                {
                    b.HasOne("Que.Models.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Que.Models.Question", b =>
                {
                    b.HasOne("Que.Models.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("Que.Models.Quiz", b =>
                {
                    b.HasOne("Que.Models.User", null)
                        .WithMany("Quizes")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Que.Models.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("Que.Models.Quiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Que.Models.User", b =>
                {
                    b.Navigation("Quizes");
                });
#pragma warning restore 612, 618
        }
    }
}
